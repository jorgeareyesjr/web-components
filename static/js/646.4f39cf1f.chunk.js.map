{"version":3,"file":"static/js/646.4f39cf1f.chunk.js","mappings":"0OAoBe,SAASA,EAAsB,GAA4B,IAA1BC,EAAM,EAANA,OAAQC,EAAQ,EAARA,SACjDC,GAAWC,EAAAA,EAAAA,MAGXC,GAAsBC,EAAAA,EAAAA,IAAYC,EAAAA,IAClCC,GAAcF,EAAAA,EAAAA,IAAYG,EAAAA,IAC1BC,GAAoBC,EAAAA,EAAAA,iBAAgBV,IAG1CW,EAAAA,EAAAA,YAAU,WACT,IAAIC,GAAkB,EAiBtB,OAPKA,GAAoBL,IAEvBM,EAAAA,uBAVsB,SAACC,GACxB,IAAQC,EAASC,KAAKC,MAAMH,GAApBC,KAEAX,EAAoBW,GAEzBb,GAASgB,EAAAA,EAAAA,GAAeF,KAAKC,MAAMH,KADnCZ,GAASgB,EAAAA,EAAAA,GAAeT,GAE5B,CAMIU,CAAgBC,EAAAA,eADhBlB,GAASgB,EAAAA,EAAAA,GAAeT,KAIrB,WACNG,GAAkB,CACnB,CACD,GAAG,CACFV,EACAE,EACAG,EACAE,IAiBD,OAAKT,GAKJ,gBAAKqB,UAViC,UARZ,2BACK,OAAXd,QAAW,IAAXA,OAAW,EAAXA,EAAae,MAQP,YALG,mBACN,OAAXf,QAAW,IAAXA,OAAW,EAAXA,EAAaQ,OAa2B,SAClDd,KALK,SAAC,IAAO,CAACsB,QAAO,8BAQzB,C","sources":["app/wrappers/VisualSettingsWrapper.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n/* Redux */\nimport { getActiveThemeSelector, getRegisteredThemesMapSelector } from '../_redux/themes/selectors';\nimport { setActiveTheme } from '../_redux/themes/operations';\n\n// TODO: Add types.ts\n\n/* Services */\nimport {\n\tsavedThemeKey,\n\tvalidatedSavedThemeKey,\n\tgetDefaultTheme,\n} from '../services/ManageAppData';\n\n/* Components */\nimport Spinner from '../components/Spinner/Spinner';\n\n// Note: The redux-saga middleware will automatically synchronize and keep all of the browser's localStorage data up-to-date.\nexport default function VisualSettingsWrapper({ themes, children }: any) {\n\tconst dispatch = useDispatch();\n\n\t// Theme.\n\tconst registeredThemesMap = useSelector(getRegisteredThemesMapSelector);\n\tconst activeTheme = useSelector(getActiveThemeSelector);\n\tconst defaultTheme: any = getDefaultTheme(themes);\n\n\t// Effect to manage the app's active theme.\n\tuseEffect(() => {\n\t\tlet effectCancelled = false;\n\n\t\tconst checkSavedTheme = (key: string) => {\n\t\t\tconst { name } = JSON.parse(key);\n\t\t\t// If the saved theme isn't registered within the themesMap, set the provided default theme as the active theme. If the saved theme is supported, set it as the active theme.\n\t\t\treturn !registeredThemesMap[name]\n\t\t\t\t? dispatch(setActiveTheme(defaultTheme))\n\t\t\t\t: dispatch(setActiveTheme(JSON.parse(key)))\n\t\t};\n\n\t\tif (!effectCancelled && !activeTheme) {\n\t\t\t// Check the browser's localStorage for a valid saved theme key. If it doesn't exist, set the provided default theme as the active theme. If it exists, check it against the themesMap to ensure it's a supported theme.\n\t\t\t!validatedSavedThemeKey\n\t\t\t\t? dispatch(setActiveTheme(defaultTheme))\n\t\t\t\t: checkSavedTheme(savedThemeKey);\n\t\t};\n\n\t\treturn () => {\n\t\t\teffectCancelled = false;\n\t\t};\n\t}, [\n\t\tdispatch,\n\t\tregisteredThemesMap,\n\t\tactiveTheme,\n\t\tdefaultTheme,\n\t]);\n\n\t// Set component classnames.\n\tconst setThemeBaseClassName = () => (\n\t\t`t-theme t-theme--${activeTheme?.base}`\n\t);\n\n\tconst setThemModifierClassName = () => (\n\t\t`t-theme--${activeTheme?.name}`\n\t);\n\n\tconst setVisualSettingsWrapperClassName = () => (\n\t\t`${setThemeBaseClassName()} ${setThemModifierClassName()}`\n\t);\n\n\t/* Views */\n\tif (!themes) {\n\t\treturn <Spinner message={`Loading visual settings...`} />;\n\t};\n\n\treturn (\n\t\t<div className={setVisualSettingsWrapperClassName()}>\n\t\t\t{children}\n\t\t</div>\n\t);\n};\n"],"names":["VisualSettingsWrapper","themes","children","dispatch","useDispatch","registeredThemesMap","useSelector","getRegisteredThemesMapSelector","activeTheme","getActiveThemeSelector","defaultTheme","getDefaultTheme","useEffect","effectCancelled","validatedSavedThemeKey","key","name","JSON","parse","setActiveTheme","checkSavedTheme","savedThemeKey","className","base","message"],"sourceRoot":""}