{"version":3,"file":"static/js/128.d8d73472.chunk.js","mappings":"0LAMaA,GAAuBC,EAAAA,EAAAA,KAHf,SAACC,GAAe,OAAKA,EAAMC,IAAIC,GAAGC,SAAU,IAKhE,SAACF,GAAG,OAAKA,CAAG,IAGAG,GAA4BL,EAAAA,EAAAA,KAPf,SAACC,GAAU,OAAKA,EAAMC,IAAII,KAAKC,cAAe,IASvE,SAACA,GAAc,OAAKA,CAAc,G,sJCQpB,SAASC,EAAsB,GAA6B,IAA3BC,EAAO,EAAPA,QAASC,EAAQ,EAARA,SAClDC,GAAWC,EAAAA,EAAAA,MAGXC,GAAuBC,EAAAA,EAAAA,IAAYC,EAAAA,IACnCC,GAAeF,EAAAA,EAAAA,IAAYG,EAAAA,IAC3BC,GAAqBC,EAAAA,EAAAA,kBAAiBV,GAGtCL,GAAYU,EAAAA,EAAAA,IAAYf,EAAAA,IAG9BqB,EAAAA,EAAAA,YAAU,WACT,IAAIC,GAAkB,EAiBtB,OAPKA,GAAoBL,IAEvBM,EAAAA,wBAVuB,SAACC,GACzB,IAAQC,EAASC,KAAKC,MAAMH,GAApBC,KAEAX,EAAqBW,GAE1Bb,GAASgB,EAAAA,EAAAA,GAAgBF,KAAKC,MAAMH,KADpCZ,GAASgB,EAAAA,EAAAA,GAAgBT,GAE7B,CAMIU,CAAiBC,EAAAA,gBADjBlB,GAASgB,EAAAA,EAAAA,GAAgBT,KAItB,WACNG,GAAkB,CACnB,CACD,GAAG,CACFV,EACAE,EACAG,EACAE,IAiBD,OAAKT,GAKJ,gBAAKqB,UAViC,UARf,6BACW,OAAZd,QAAY,IAAZA,OAAY,EAAZA,EAAcQ,MAQb,YALYpB,EAAS,mDAcQ,SACjDM,KALI,SAAC,IAAO,CAACqB,QAAO,8BAQzB,C","sources":["app/_redux/nav/selectors.ts","app/wrappers/LayoutSettingsWrapper.tsx"],"sourcesContent":["import { createSelector } from 'reselect';\nimport { AppState } from '../rootReducer';\n\nconst getNavIsOpen = (state: AppState) => state.nav.ui.navIsOpen;\nconst getNavDisplaySize = (state: any) => state.nav.data.navDisplaySize;\n\nexport const getNavIsOpenSelector = createSelector(\n\tgetNavIsOpen,\n\t(nav) => nav,\n);\n\nexport const getNavDisplaySizeSelector = createSelector(\n\tgetNavDisplaySize,\n\t(navDisplaySize) => navDisplaySize,\n);\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n/* Redux */\nimport { getActiveLayoutSelector, getRegisteredLayoutsMapSelector } from '../_redux/layouts/selectors';\nimport { setActiveLayout } from '../_redux/layouts/operations';\nimport { getNavIsOpenSelector } from '../_redux/nav/selectors';\n\n// TODO: Add types.ts\n\n/* Services */\nimport {\n\tsavedLayoutKey,\n\tvalidatedSavedLayoutKey,\n\tgetDefaultLayout,\n} from '../services/ManageAppData';\n\n/* Components */\nimport Spinner from '../components/Spinner/Spinner';\n\n// Note: The redux-saga middleware will automatically synchronize and keep all of the browser's localStorage data up-to-date.\nexport default function LayoutSettingsWrapper({ layouts, children }: any) {\n\tconst dispatch = useDispatch();\n\n\t// Layout.\n\tconst registeredLayoutsMap = useSelector(getRegisteredLayoutsMapSelector);\n\tconst activeLayout = useSelector(getActiveLayoutSelector);\n\tconst defaultLayout: any = getDefaultLayout(layouts);\n\t\n\t// Nav State.\n\tconst navIsOpen = useSelector(getNavIsOpenSelector);\n\n\t// Effect to manage the app's active layout.\n\tuseEffect(() => {\n\t\tlet effectCancelled = false;\n\n\t\tconst checkSavedLayout = (key: string) => {\n\t\t\tconst { name } = JSON.parse(key);\n\t\t\t// If the saved layout isn't registered within the layoutsMap, set the provided default layout as the active layout. If the saved layout is supported, set it as the active layout.\n\t\t\treturn !registeredLayoutsMap[name]\n\t\t\t\t? dispatch(setActiveLayout(defaultLayout))\n\t\t\t\t: dispatch(setActiveLayout(JSON.parse(key)))\n\t\t};\n\n\t\tif (!effectCancelled && !activeLayout) {\n\t\t\t// Check the browser's localStorage for a valid saved layout key. If it doesn't exist, set the provided default layout as the active layout. If it exists, check it against the layoutsMap to ensure it's a supported layout.\n\t\t\t!validatedSavedLayoutKey\n\t\t\t\t? dispatch(setActiveLayout(defaultLayout))\n\t\t\t\t: checkSavedLayout(savedLayoutKey);\n\t\t};\n\n\t\treturn () => {\n\t\t\teffectCancelled = false;\n\t\t};\n\t}, [\n\t\tdispatch,\n\t\tregisteredLayoutsMap,\n\t\tactiveLayout,\n\t\tdefaultLayout,\n\t]);\n\n\t// Set component classnames.\n\tconst setLayoutClassName = () => (\n\t\t`l-layout l-layout--${activeLayout?.name}`\n\t);\n\n\tconst setNavStateClassName = () => !navIsOpen\n\t\t? `l-layout--nav-is-closed`\n\t\t: `l-layout--nav-is-open`;\n\n\tconst setLayoutSettingsWrapperClassName = () => (\n\t\t`${setLayoutClassName()} ${setNavStateClassName()}`\n\t);\n\n\t/* Views */\n\tif (!layouts) {\n\t\treturn <Spinner message={`Loading layout settings...`} />;\n\t};\n\n\treturn (\n\t\t<div className={setLayoutSettingsWrapperClassName()}>\n\t\t\t{ children }\n\t\t</div>\n\t);\n};\n"],"names":["getNavIsOpenSelector","createSelector","state","nav","ui","navIsOpen","getNavDisplaySizeSelector","data","navDisplaySize","LayoutSettingsWrapper","layouts","children","dispatch","useDispatch","registeredLayoutsMap","useSelector","getRegisteredLayoutsMapSelector","activeLayout","getActiveLayoutSelector","defaultLayout","getDefaultLayout","useEffect","effectCancelled","validatedSavedLayoutKey","key","name","JSON","parse","setActiveLayout","checkSavedLayout","savedLayoutKey","className","message"],"sourceRoot":""}